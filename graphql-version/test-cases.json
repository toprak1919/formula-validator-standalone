{
  "testCases": [
    {
      "id": "basic-addition",
      "formula": "1 + 1",
      "description": "Basic addition",
      "category": "basic-operations",
      "expectError": false,
      "expectedResult": 2
    },
    {
      "id": "basic-subtraction",
      "formula": "5 - 3",
      "description": "Basic subtraction",
      "category": "basic-operations",
      "expectError": false,
      "expectedResult": 2
    },
    {
      "id": "basic-multiplication",
      "formula": "4 * 2",
      "description": "Basic multiplication",
      "category": "basic-operations",
      "expectError": false,
      "expectedResult": 8
    },
    {
      "id": "basic-division",
      "formula": "10 / 2",
      "description": "Basic division",
      "category": "basic-operations",
      "expectError": false,
      "expectedResult": 5
    },
    {
      "id": "exponentiation",
      "formula": "2 ^ 3",
      "description": "Exponentiation",
      "category": "basic-operations",
      "expectError": false,
      "expectedResult": 8
    },
    {
      "id": "modulo",
      "formula": "10 % 3",
      "description": "Modulo operation",
      "category": "basic-operations",
      "expectError": false,
      "expectedResult": 1
    },
    {
      "id": "negative-number",
      "formula": "-5",
      "description": "Negative number",
      "category": "basic-operations",
      "expectError": false,
      "expectedResult": -5
    },
    {
      "id": "decimal-number",
      "formula": "3.14159",
      "description": "Decimal number",
      "category": "basic-operations",
      "expectError": false,
      "expectedResult": 3.14159
    },
    {
      "id": "decimal-addition",
      "formula": "1.5 + 2.5",
      "description": "Decimal addition",
      "category": "basic-operations",
      "expectError": false,
      "expectedResult": 4
    },
    {
      "id": "variable-addition",
      "formula": "$measuredValue_1 + $measuredValue_2",
      "description": "Variable addition",
      "category": "variables",
      "expectError": false,
      "expectedResult": null,
      "requiredVariables": ["$measuredValue_1", "$measuredValue_2"]
    },
    {
      "id": "constant-multiplication",
      "formula": "#constantsPi * 2",
      "description": "Constant multiplication",
      "category": "constants",
      "expectError": false,
      "expectedResult": null,
      "requiredConstants": ["#constantsPi"]
    },
    {
      "id": "negative-variable",
      "formula": "-$measuredValue_1",
      "description": "Negative variable",
      "category": "variables",
      "expectError": false,
      "expectedResult": null,
      "requiredVariables": ["$measuredValue_1"]
    },
    {
      "id": "parentheses-grouping",
      "formula": "(2 + 3) * 4",
      "description": "Parentheses grouping",
      "category": "parentheses",
      "expectError": false,
      "expectedResult": 20
    },
    {
      "id": "nested-parentheses",
      "formula": "((1 + 2) * 3) / 4",
      "description": "Nested parentheses",
      "category": "parentheses",
      "expectError": false,
      "expectedResult": 2.25
    },
    {
      "id": "single-parentheses",
      "formula": "(1)",
      "description": "Single number in parentheses",
      "category": "parentheses",
      "expectError": false,
      "expectedResult": 1
    },
    {
      "id": "missing-operator-numbers",
      "formula": "1 2",
      "description": "Missing operator between numbers",
      "category": "syntax-errors",
      "expectError": true,
      "expectedError": "Missing operator between numbers"
    },
    {
      "id": "missing-operator-variables",
      "formula": "$measuredValue_1 $measuredValue_2",
      "description": "Missing operator between variables",
      "category": "syntax-errors",
      "expectError": true,
      "expectedError": "Missing operator between variables"
    },
    {
      "id": "standalone-multiplication",
      "formula": "*",
      "description": "Standalone multiplication operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Standalone operator"
    },
    {
      "id": "standalone-division",
      "formula": "/",
      "description": "Standalone division operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Standalone operator"
    },
    {
      "id": "standalone-addition",
      "formula": "+",
      "description": "Standalone addition operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Standalone operator"
    },
    {
      "id": "trailing-addition",
      "formula": "1 +",
      "description": "Trailing addition operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Incomplete operation"
    },
    {
      "id": "trailing-multiplication",
      "formula": "2 *",
      "description": "Trailing multiplication operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Incomplete operation"
    },
    {
      "id": "trailing-division",
      "formula": "3 /",
      "description": "Trailing division operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Incomplete operation"
    },
    {
      "id": "trailing-subtraction",
      "formula": "4 -",
      "description": "Trailing subtraction operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Incomplete operation"
    },
    {
      "id": "trailing-exponentiation",
      "formula": "5 ^",
      "description": "Trailing exponentiation operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Incomplete operation"
    },
    {
      "id": "trailing-modulo",
      "formula": "6 %",
      "description": "Trailing modulo operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Incomplete operation"
    },
    {
      "id": "leading-multiplication",
      "formula": "* 5",
      "description": "Leading multiplication operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Formula cannot start with an operator"
    },
    {
      "id": "leading-division",
      "formula": "/ 10",
      "description": "Leading division operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Formula cannot start with an operator"
    },
    {
      "id": "leading-addition",
      "formula": "+ 3",
      "description": "Leading addition operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Formula cannot start with an operator"
    },
    {
      "id": "double-plus",
      "formula": "++1",
      "description": "Double plus operators",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Invalid double operators"
    },
    {
      "id": "double-plus-middle",
      "formula": "1++2",
      "description": "Double plus in middle",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Invalid double operators"
    },
    {
      "id": "adjacent-operators",
      "formula": "1 * / 2",
      "description": "Adjacent operators",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Invalid double operators"
    },
    {
      "id": "double-addition-space",
      "formula": "1 + + 2",
      "description": "Double addition with space",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Invalid double operators"
    },
    {
      "id": "double-multiplication-space",
      "formula": "2 * * 3",
      "description": "Double multiplication with space",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Invalid double operators"
    },
    {
      "id": "double-division-space",
      "formula": "3 / / 4",
      "description": "Double division with space",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Invalid double operators"
    },
    {
      "id": "triple-negation",
      "formula": "---5",
      "description": "Triple negation",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Invalid operators"
    },
    {
      "id": "empty-parentheses",
      "formula": "()",
      "description": "Empty parentheses",
      "category": "parentheses-errors",
      "expectError": true,
      "expectedError": "Empty parentheses are not allowed"
    },
    {
      "id": "empty-parentheses-space",
      "formula": "( )",
      "description": "Empty parentheses with space",
      "category": "parentheses-errors",
      "expectError": true,
      "expectedError": "Empty parentheses are not allowed"
    },
    {
      "id": "unmatched-opening",
      "formula": "(1 + 2",
      "description": "Unmatched opening parenthesis",
      "category": "parentheses-errors",
      "expectError": true,
      "expectedError": "Unmatched opening parenthesis"
    },
    {
      "id": "unmatched-closing",
      "formula": "1 + 2)",
      "description": "Unmatched closing parenthesis",
      "category": "parentheses-errors",
      "expectError": true,
      "expectedError": "Unmatched closing parenthesis"
    },
    {
      "id": "multiple-unmatched-opening",
      "formula": "((1 + 2)",
      "description": "Multiple unmatched opening parentheses",
      "category": "parentheses-errors",
      "expectError": true,
      "expectedError": "Unmatched opening parenthesis"
    },
    {
      "id": "multiple-unmatched-closing",
      "formula": "(1 + 2))",
      "description": "Multiple unmatched closing parentheses",
      "category": "parentheses-errors",
      "expectError": true,
      "expectedError": "Unmatched closing parenthesis"
    },
    {
      "id": "standalone-dollar",
      "formula": "$",
      "description": "Standalone dollar symbol",
      "category": "variable-errors",
      "expectError": true,
      "expectedError": "Invalid variable syntax"
    },
    {
      "id": "standalone-hash",
      "formula": "#",
      "description": "Standalone hash symbol",
      "category": "constant-errors",
      "expectError": true,
      "expectedError": "Invalid constant syntax"
    },
    {
      "id": "double-dollar",
      "formula": "$$measuredValue",
      "description": "Double dollar prefix",
      "category": "variable-errors",
      "expectError": true,
      "expectedError": "Invalid variable syntax"
    },
    {
      "id": "double-hash",
      "formula": "##constant",
      "description": "Double hash prefix",
      "category": "constant-errors",
      "expectError": true,
      "expectedError": "Invalid constant syntax"
    },
    {
      "id": "dollar-numbers-only",
      "formula": "$123",
      "description": "Dollar with only numbers",
      "category": "variable-errors",
      "expectError": true,
      "expectedError": "Invalid variable syntax"
    },
    {
      "id": "hash-numbers-only",
      "formula": "#456",
      "description": "Hash with only numbers",
      "category": "constant-errors",
      "expectError": true,
      "expectedError": "Invalid constant syntax"
    },
    {
      "id": "undefined-variable",
      "formula": "$unknownVariable",
      "description": "Undefined variable",
      "category": "variable-errors",
      "expectError": true,
      "expectedError": "Undefined variable: $unknownVariable"
    },
    {
      "id": "undefined-constant",
      "formula": "#unknownConstant",
      "description": "Undefined constant",
      "category": "constant-errors",
      "expectError": true,
      "expectedError": "Undefined constant: #unknownConstant"
    },
    {
      "id": "sqrt-function",
      "formula": "sqrt(16)",
      "description": "Square root function",
      "category": "function-errors",
      "expectError": true,
      "expectedError": "Undefined function: sqrt"
    },
    {
      "id": "sin-function",
      "formula": "sin(0)",
      "description": "Sine function",
      "category": "function-errors",
      "expectError": true,
      "expectedError": "Undefined function: sin"
    },
    {
      "id": "cos-function",
      "formula": "cos(0)",
      "description": "Cosine function",
      "category": "function-errors",
      "expectError": true,
      "expectedError": "Undefined function: cos"
    },
    {
      "id": "unknown-function",
      "formula": "unknownFunc()",
      "description": "Unknown function",
      "category": "function-errors",
      "expectError": true,
      "expectedError": "Undefined function: unknownFunc"
    },
    {
      "id": "function-no-parentheses",
      "formula": "sqrt",
      "description": "Function without parentheses",
      "category": "function-errors",
      "expectError": true,
      "expectedError": "Invalid identifier"
    },
    {
      "id": "function-no-args",
      "formula": "sqrt()",
      "description": "Function without arguments",
      "category": "function-errors",
      "expectError": true,
      "expectedError": "Undefined function: sqrt"
    },
    {
      "id": "trailing-decimal",
      "formula": "1.",
      "description": "Trailing decimal point",
      "category": "decimal-errors",
      "expectError": true,
      "expectedError": "Invalid decimal"
    },
    {
      "id": "leading-decimal",
      "formula": ".5",
      "description": "Leading decimal point",
      "category": "decimal-errors",
      "expectError": true,
      "expectedError": "Invalid decimal"
    },
    {
      "id": "double-decimal",
      "formula": "1..2",
      "description": "Double decimal point",
      "category": "decimal-errors",
      "expectError": true,
      "expectedError": "Invalid decimal notation"
    },
    {
      "id": "multiple-decimals",
      "formula": "1.2.3",
      "description": "Multiple decimal points",
      "category": "decimal-errors",
      "expectError": true,
      "expectedError": "Invalid decimal notation"
    },
    {
      "id": "division-by-zero",
      "formula": "1 / 0",
      "description": "Division by zero",
      "category": "edge-cases",
      "expectError": false,
      "expectedResult": "Infinity",
      "note": "JavaScript returns Infinity for division by zero"
    },
    {
      "id": "zero-division-zero",
      "formula": "0 / 0",
      "description": "Zero divided by zero",
      "category": "edge-cases",
      "expectError": false,
      "expectedResult": "NaN",
      "note": "JavaScript returns NaN for 0/0"
    },
    {
      "id": "single-zero",
      "formula": "0",
      "description": "Single zero",
      "category": "edge-cases",
      "expectError": false,
      "expectedResult": 0
    },
    {
      "id": "single-digit",
      "formula": "1",
      "description": "Single digit",
      "category": "edge-cases",
      "expectError": false,
      "expectedResult": 1
    },
    {
      "id": "formula-with-spaces",
      "formula": " 1 + 1 ",
      "description": "Formula with leading/trailing spaces",
      "category": "edge-cases",
      "expectError": false,
      "expectedResult": 2
    },
    {
      "id": "no-spaces",
      "formula": "1+1",
      "description": "Formula without spaces",
      "category": "edge-cases",
      "expectError": false,
      "expectedResult": 2
    },
    {
      "id": "nested-single-number",
      "formula": "((1))",
      "description": "Nested single number in parentheses",
      "category": "edge-cases",
      "expectError": false,
      "expectedResult": 1
    },
    {
      "id": "complex-valid",
      "formula": "($measuredValue_1 + $measuredValue_2) * #constantsPi / 2",
      "description": "Complex valid formula with variables and constants",
      "category": "complex",
      "expectError": false,
      "expectedResult": null,
      "requiredVariables": ["$measuredValue_1", "$measuredValue_2"],
      "requiredConstants": ["#constantsPi"]
    },
    {
      "id": "missing-value-parentheses",
      "formula": "(1 + ) * 2",
      "description": "Missing value in parentheses",
      "category": "parentheses-errors",
      "expectError": true,
      "expectedError": "Incomplete operation"
    },
    {
      "id": "multiple-numbers-no-ops",
      "formula": "1 2 3",
      "description": "Multiple numbers without operators",
      "category": "syntax-errors",
      "expectError": true,
      "expectedError": "Missing operator"
    },
    {
      "id": "missing-op-in-parens",
      "formula": "(1 2)",
      "description": "Missing operator in parentheses",
      "category": "parentheses-errors",
      "expectError": true,
      "expectedError": "Missing operator"
    },
    {
      "id": "trailing-op-after-var",
      "formula": "$measuredValue_1 *",
      "description": "Trailing operator after variable",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Incomplete operation"
    },
    {
      "id": "trailing-op-after-const",
      "formula": "#constantsPi /",
      "description": "Trailing operator after constant",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Incomplete operation"
    },
    {
      "id": "leading-op-before-var",
      "formula": "* $measuredValue_1",
      "description": "Leading operator before variable",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Formula cannot start with an operator"
    },
    {
      "id": "leading-op-before-const",
      "formula": "/ #constantsPi",
      "description": "Leading operator before constant",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Formula cannot start with an operator"
    },
    {
      "id": "empty-plus-parens",
      "formula": "() + 5",
      "description": "Empty parentheses in expression",
      "category": "parentheses-errors",
      "expectError": true,
      "expectedError": "Empty parentheses are not allowed"
    },
    {
      "id": "parens-plus-empty",
      "formula": "5 + ()",
      "description": "Empty parentheses at end",
      "category": "parentheses-errors",
      "expectError": true,
      "expectedError": "Empty parentheses are not allowed"
    },
    {
      "id": "complex-trailing-op",
      "formula": "1 + 2 + ",
      "description": "Complex expression with trailing operator",
      "category": "operator-errors",
      "expectError": true,
      "expectedError": "Incomplete operation"
    }
  ],
  "testData": {
    "measuredValues": {
      "$measuredValue_1": {
        "id": "measuredValue_1",
        "name": "$measuredValue_1",
        "value": 10,
        "description": "First test measured value"
      },
      "$measuredValue_2": {
        "id": "measuredValue_2",
        "name": "$measuredValue_2",
        "value": 20,
        "description": "Second test measured value"
      },
      "$measuredValue_3": {
        "id": "measuredValue_3",
        "name": "$measuredValue_3",
        "value": 30,
        "description": "Third test measured value"
      }
    },
    "constants": {
      "#constantsPi": {
        "id": "constantsPi",
        "name": "#constantsPi",
        "value": 3.14159,
        "description": "Mathematical constant Pi"
      },
      "#constantsE": {
        "id": "constantsE",
        "name": "#constantsE",
        "value": 2.71828,
        "description": "Mathematical constant e"
      },
      "#constantsSqrtTwo": {
        "id": "constantsSqrtTwo",
        "name": "#constantsSqrtTwo",
        "value": 1.41421,
        "description": "Square root of 2"
      }
    }
  },
  "categories": [
    {
      "id": "basic-operations",
      "name": "Basic Operations",
      "description": "Simple arithmetic operations"
    },
    {
      "id": "variables",
      "name": "Variables",
      "description": "Tests with measured values ($variables)"
    },
    {
      "id": "constants",
      "name": "Constants",
      "description": "Tests with constants (#constants)"
    },
    {
      "id": "parentheses",
      "name": "Parentheses",
      "description": "Valid parentheses usage"
    },
    {
      "id": "syntax-errors",
      "name": "Syntax Errors",
      "description": "General syntax errors"
    },
    {
      "id": "operator-errors",
      "name": "Operator Errors",
      "description": "Invalid operator usage"
    },
    {
      "id": "parentheses-errors",
      "name": "Parentheses Errors",
      "description": "Invalid parentheses usage"
    },
    {
      "id": "variable-errors",
      "name": "Variable Errors",
      "description": "Invalid variable syntax or undefined variables"
    },
    {
      "id": "constant-errors",
      "name": "Constant Errors",
      "description": "Invalid constant syntax or undefined constants"
    },
    {
      "id": "function-errors",
      "name": "Function Errors",
      "description": "Function-related errors"
    },
    {
      "id": "decimal-errors",
      "name": "Decimal Errors",
      "description": "Invalid decimal notation"
    },
    {
      "id": "edge-cases",
      "name": "Edge Cases",
      "description": "Special cases and boundary conditions"
    },
    {
      "id": "complex",
      "name": "Complex",
      "description": "Complex formulas combining multiple features"
    }
  ]
}